/**
 * Diem Dev API Specification
 * Diem Dev API is REST API for client applications to interact the Diem blockchain. 
 *
 * OpenAPI spec version: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Event } from './Event';
import { OnChainTransactionInfo } from './OnChainTransactionInfo';
import { TransactionPayload } from './TransactionPayload';
import { TransactionSignature } from './TransactionSignature';
import { UserTransactionProperties } from './UserTransactionProperties';
import { UserTransactionRequest } from './UserTransactionRequest';
import { UserTransactionSignature } from './UserTransactionSignature';
import { HttpFile } from '../http/http';

export class UserTransaction {
    'type': string;
    'events': Array<Event>;
    /**
    * Hex-encoded 16 bytes Diem account address.  Prefixed with `0x` and leading zeros are trimmed.  See [doc](https://diem.github.io/move/address.html) for more details.
    */
    'sender': string;
    /**
    * Unsiged int64 type value
    */
    'sequenceNumber': string;
    /**
    * Unsiged int64 type value
    */
    'maxGasAmount': string;
    /**
    * Unsiged int64 type value
    */
    'gasUnitPrice': string;
    'gasCurrencyCode': string;
    /**
    * Timestamp in seconds, e.g. transaction expiration timestamp.
    */
    'expirationTimestampSecs': string;
    'payload': TransactionPayload;
    'signature': TransactionSignature;
    /**
    * Unsiged int64 type value
    */
    'version': string;
    /**
    * All bytes data are represented as hex-encoded string prefixed with `0x` and fulfilled with two hex digits per byte.  Different with `Address` type, hex-encoded bytes should not trim any zeros.
    */
    'hash': string;
    /**
    * All bytes data are represented as hex-encoded string prefixed with `0x` and fulfilled with two hex digits per byte.  Different with `Address` type, hex-encoded bytes should not trim any zeros.
    */
    'stateRootHash': string;
    /**
    * All bytes data are represented as hex-encoded string prefixed with `0x` and fulfilled with two hex digits per byte.  Different with `Address` type, hex-encoded bytes should not trim any zeros.
    */
    'eventRootHash': string;
    /**
    * Unsiged int64 type value
    */
    'gasUsed': string;
    /**
    * Transaction execution result (success: true, failure: false). See `vm_status` for human readable error message from Diem VM.
    */
    'success': boolean;
    /**
    * Human readable transaction execution result message from Diem VM.
    */
    'vmStatus': string;

    static readonly discriminator: string | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "type",
            "baseName": "type",
            "type": "string",
            "format": ""
        },
        {
            "name": "events",
            "baseName": "events",
            "type": "Array<Event>",
            "format": ""
        },
        {
            "name": "sender",
            "baseName": "sender",
            "type": "string",
            "format": "address"
        },
        {
            "name": "sequenceNumber",
            "baseName": "sequence_number",
            "type": "string",
            "format": "uint64"
        },
        {
            "name": "maxGasAmount",
            "baseName": "max_gas_amount",
            "type": "string",
            "format": "uint64"
        },
        {
            "name": "gasUnitPrice",
            "baseName": "gas_unit_price",
            "type": "string",
            "format": "uint64"
        },
        {
            "name": "gasCurrencyCode",
            "baseName": "gas_currency_code",
            "type": "string",
            "format": ""
        },
        {
            "name": "expirationTimestampSecs",
            "baseName": "expiration_timestamp_secs",
            "type": "string",
            "format": "uint64"
        },
        {
            "name": "payload",
            "baseName": "payload",
            "type": "TransactionPayload",
            "format": ""
        },
        {
            "name": "signature",
            "baseName": "signature",
            "type": "TransactionSignature",
            "format": ""
        },
        {
            "name": "version",
            "baseName": "version",
            "type": "string",
            "format": "uint64"
        },
        {
            "name": "hash",
            "baseName": "hash",
            "type": "string",
            "format": "hex"
        },
        {
            "name": "stateRootHash",
            "baseName": "state_root_hash",
            "type": "string",
            "format": "hex"
        },
        {
            "name": "eventRootHash",
            "baseName": "event_root_hash",
            "type": "string",
            "format": "hex"
        },
        {
            "name": "gasUsed",
            "baseName": "gas_used",
            "type": "string",
            "format": "uint64"
        },
        {
            "name": "success",
            "baseName": "success",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "vmStatus",
            "baseName": "vm_status",
            "type": "string",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return UserTransaction.attributeTypeMap;
    }
    
    public constructor() {
    }
}

